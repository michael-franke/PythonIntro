Traceback (most recent call last):
  File "/opt/hostedtoolcache/Python/3.8.18/x64/lib/python3.8/site-packages/jupyter_cache/executors/utils.py", line 58, in single_nb_execution
    executenb(
  File "/opt/hostedtoolcache/Python/3.8.18/x64/lib/python3.8/site-packages/nbclient/client.py", line 1305, in execute
    return NotebookClient(nb=nb, resources=resources, km=km, **kwargs).execute()
  File "/opt/hostedtoolcache/Python/3.8.18/x64/lib/python3.8/site-packages/jupyter_core/utils/__init__.py", line 172, in wrapped
    return loop.run_until_complete(inner)
  File "/opt/hostedtoolcache/Python/3.8.18/x64/lib/python3.8/asyncio/base_events.py", line 616, in run_until_complete
    return future.result()
  File "/opt/hostedtoolcache/Python/3.8.18/x64/lib/python3.8/site-packages/nbclient/client.py", line 705, in async_execute
    await self.async_execute_cell(
  File "/opt/hostedtoolcache/Python/3.8.18/x64/lib/python3.8/site-packages/nbclient/client.py", line 1058, in async_execute_cell
    await self._check_raise_for_error(cell, cell_index, exec_reply)
  File "/opt/hostedtoolcache/Python/3.8.18/x64/lib/python3.8/site-packages/nbclient/client.py", line 914, in _check_raise_for_error
    raise CellExecutionError.from_cell_and_msg(cell, exec_reply_content)
nbclient.exceptions.CellExecutionError: An error occurred while executing the following cell:
------------------
import turtle #import turtle module, a graphical interface to draw shapes; opens in separate window

turtle.speed(1000) #set speed of animation
turtle.setheading(90) #set initial orientation of the turtle as looking straight up

def draw_branch(len): #recursive function to draw a tree
    if (len > 5):
        turtle.color("brown") #draw branches in brown
        turtle.forward(len)
        turtle.right(25)
        draw_branch(len - 5) #recursive function call
        turtle.left(50)
        draw_branch(len - 5) #recursive function call
        turtle.right(25)
        turtle.backward(len)
    else:
        turtle.color("green") #draw leaves in green
        turtle.begin_fill()
        turtle.circle(5)
        turtle.end_fill()
        turtle.color("brown") #reset color to brown
        
draw_branch(35)
------------------


[0;31m---------------------------------------------------------------------------[0m
[0;31mTclError[0m                                  Traceback (most recent call last)
Cell [0;32mIn[6], line 3[0m
[1;32m      1[0m [38;5;28;01mimport[39;00m [38;5;21;01mturtle[39;00m [38;5;66;03m#import turtle module, a graphical interface to draw shapes; opens in separate window[39;00m
[0;32m----> 3[0m [43mturtle[49m[38;5;241;43m.[39;49m[43mspeed[49m[43m([49m[38;5;241;43m1000[39;49m[43m)[49m [38;5;66;03m#set speed of animation[39;00m
[1;32m      4[0m turtle[38;5;241m.[39msetheading([38;5;241m90[39m) [38;5;66;03m#set initial orientation of the turtle as looking straight up[39;00m
[1;32m      6[0m [38;5;28;01mdef[39;00m [38;5;21mdraw_branch[39m([38;5;28mlen[39m): [38;5;66;03m#recursive function to draw a tree[39;00m

File [0;32m<string>:6[0m, in [0;36mspeed[0;34m(speed)[0m

File [0;32m/opt/hostedtoolcache/Python/3.8.18/x64/lib/python3.8/turtle.py:3813[0m, in [0;36mTurtle.__init__[0;34m(self, shape, undobuffersize, visible)[0m
[1;32m   3808[0m [38;5;28;01mdef[39;00m [38;5;21m__init__[39m([38;5;28mself[39m,
[1;32m   3809[0m              shape[38;5;241m=[39m_CFG[[38;5;124m"[39m[38;5;124mshape[39m[38;5;124m"[39m],
[1;32m   3810[0m              undobuffersize[38;5;241m=[39m_CFG[[38;5;124m"[39m[38;5;124mundobuffersize[39m[38;5;124m"[39m],
[1;32m   3811[0m              visible[38;5;241m=[39m_CFG[[38;5;124m"[39m[38;5;124mvisible[39m[38;5;124m"[39m]):
[1;32m   3812[0m     [38;5;28;01mif[39;00m Turtle[38;5;241m.[39m_screen [38;5;129;01mis[39;00m [38;5;28;01mNone[39;00m:
[0;32m-> 3813[0m         Turtle[38;5;241m.[39m_screen [38;5;241m=[39m [43mScreen[49m[43m([49m[43m)[49m
[1;32m   3814[0m     RawTurtle[38;5;241m.[39m[38;5;21m__init__[39m([38;5;28mself[39m, Turtle[38;5;241m.[39m_screen,
[1;32m   3815[0m                        shape[38;5;241m=[39mshape,
[1;32m   3816[0m                        undobuffersize[38;5;241m=[39mundobuffersize,
[1;32m   3817[0m                        visible[38;5;241m=[39mvisible)

File [0;32m/opt/hostedtoolcache/Python/3.8.18/x64/lib/python3.8/turtle.py:3663[0m, in [0;36mScreen[0;34m()[0m
[1;32m   3659[0m [38;5;250m[39m[38;5;124;03m"""Return the singleton screen object.[39;00m
[1;32m   3660[0m [38;5;124;03mIf none exists at the moment, create a new one and return it,[39;00m
[1;32m   3661[0m [38;5;124;03melse return the existing one."""[39;00m
[1;32m   3662[0m [38;5;28;01mif[39;00m Turtle[38;5;241m.[39m_screen [38;5;129;01mis[39;00m [38;5;28;01mNone[39;00m:
[0;32m-> 3663[0m     Turtle[38;5;241m.[39m_screen [38;5;241m=[39m [43m_Screen[49m[43m([49m[43m)[49m
[1;32m   3664[0m [38;5;28;01mreturn[39;00m Turtle[38;5;241m.[39m_screen

File [0;32m/opt/hostedtoolcache/Python/3.8.18/x64/lib/python3.8/turtle.py:3679[0m, in [0;36m_Screen.__init__[0;34m(self)[0m
[1;32m   3672[0m [38;5;28;01mdef[39;00m [38;5;21m__init__[39m([38;5;28mself[39m):
[1;32m   3673[0m     [38;5;66;03m# XXX there is no need for this code to be conditional,[39;00m
[1;32m   3674[0m     [38;5;66;03m# as there will be only a single _Screen instance, anyway[39;00m
[1;32m   3675[0m     [38;5;66;03m# XXX actually, the turtle demo is injecting root window,[39;00m
[1;32m   3676[0m     [38;5;66;03m# so perhaps the conditional creation of a root should be[39;00m
[1;32m   3677[0m     [38;5;66;03m# preserved (perhaps by passing it as an optional parameter)[39;00m
[1;32m   3678[0m     [38;5;28;01mif[39;00m _Screen[38;5;241m.[39m_root [38;5;129;01mis[39;00m [38;5;28;01mNone[39;00m:
[0;32m-> 3679[0m         _Screen[38;5;241m.[39m_root [38;5;241m=[39m [38;5;28mself[39m[38;5;241m.[39m_root [38;5;241m=[39m [43m_Root[49m[43m([49m[43m)[49m
[1;32m   3680[0m         [38;5;28mself[39m[38;5;241m.[39m_root[38;5;241m.[39mtitle(_Screen[38;5;241m.[39m_title)
[1;32m   3681[0m         [38;5;28mself[39m[38;5;241m.[39m_root[38;5;241m.[39mondestroy([38;5;28mself[39m[38;5;241m.[39m_destroy)

File [0;32m/opt/hostedtoolcache/Python/3.8.18/x64/lib/python3.8/turtle.py:435[0m, in [0;36m_Root.__init__[0;34m(self)[0m
[1;32m    434[0m [38;5;28;01mdef[39;00m [38;5;21m__init__[39m([38;5;28mself[39m):
[0;32m--> 435[0m     [43mTK[49m[38;5;241;43m.[39;49m[43mTk[49m[38;5;241;43m.[39;49m[38;5;21;43m__init__[39;49m[43m([49m[38;5;28;43mself[39;49m[43m)[49m

File [0;32m/opt/hostedtoolcache/Python/3.8.18/x64/lib/python3.8/tkinter/__init__.py:2270[0m, in [0;36mTk.__init__[0;34m(self, screenName, baseName, className, useTk, sync, use)[0m
[1;32m   2268[0m         baseName [38;5;241m=[39m baseName [38;5;241m+[39m ext
[1;32m   2269[0m interactive [38;5;241m=[39m [38;5;241m0[39m
[0;32m-> 2270[0m [38;5;28mself[39m[38;5;241m.[39mtk [38;5;241m=[39m [43m_tkinter[49m[38;5;241;43m.[39;49m[43mcreate[49m[43m([49m[43mscreenName[49m[43m,[49m[43m [49m[43mbaseName[49m[43m,[49m[43m [49m[43mclassName[49m[43m,[49m[43m [49m[43minteractive[49m[43m,[49m[43m [49m[43mwantobjects[49m[43m,[49m[43m [49m[43museTk[49m[43m,[49m[43m [49m[43msync[49m[43m,[49m[43m [49m[43muse[49m[43m)[49m
[1;32m   2271[0m [38;5;28;01mif[39;00m useTk:
[1;32m   2272[0m     [38;5;28mself[39m[38;5;241m.[39m_loadtk()

[0;31mTclError[0m: no display name and no $DISPLAY environment variable

