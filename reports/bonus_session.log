Traceback (most recent call last):
  File "C:\Users\julia\miniconda3\lib\site-packages\jupyter_cache\executors\utils.py", line 51, in single_nb_execution
    executenb(
  File "C:\Users\julia\miniconda3\lib\site-packages\nbclient\client.py", line 1204, in execute
    return NotebookClient(nb=nb, resources=resources, km=km, **kwargs).execute()
  File "C:\Users\julia\miniconda3\lib\site-packages\nbclient\util.py", line 84, in wrapped
    return just_run(coro(*args, **kwargs))
  File "C:\Users\julia\miniconda3\lib\site-packages\nbclient\util.py", line 62, in just_run
    return loop.run_until_complete(coro)
  File "C:\Users\julia\miniconda3\lib\asyncio\base_events.py", line 647, in run_until_complete
    return future.result()
  File "C:\Users\julia\miniconda3\lib\site-packages\nbclient\client.py", line 663, in async_execute
    await self.async_execute_cell(
  File "C:\Users\julia\miniconda3\lib\site-packages\nbclient\client.py", line 965, in async_execute_cell
    await self._check_raise_for_error(cell, cell_index, exec_reply)
  File "C:\Users\julia\miniconda3\lib\site-packages\nbclient\client.py", line 862, in _check_raise_for_error
    raise CellExecutionError.from_cell_and_msg(cell, exec_reply_content)
nbclient.exceptions.CellExecutionError: An error occurred while executing the following cell:
------------------
"""THE TOWER OF HANOI, by Al Sweigart al@inventwithpython.com
A stack-moving puzzle game."""

import copy

TOTAL_DISKS = 5  # More disks means a more difficult puzzle.

# Start with all disks on tower A:
SOLVED_TOWER = list(range(TOTAL_DISKS, 0, -1)) # evaluates to: [5,4,3,2,1] with TOTAL_DISKS = 5


def main():
    """Runs a single game of The Tower of Hanoi."""
    print(
        """THE TOWER OF HANOI, by Al Sweigart al@inventwithpython.com

Move the tower of disks, one disk at a time, to another tower. Larger
disks cannot rest on top of a smaller disk.

More info at https://en.wikipedia.org/wiki/Tower_of_Hanoi
"""
    )

    """The towers dictionary has keys "A", "B", and "C" and values
    that are lists representing a tower of disks. The list contains
    integers representing disks of different sizes, and the start of
    the list is the bottom of the tower. For a game with 5 disks,
    the list [5, 4, 3, 2, 1] represents a completed tower. The blank
    list [] represents a tower of no disks. The list [1, 3] has a
    larger disk on top of a smaller disk and is an invalid
    configuration. The list [3, 1] is allowed since smaller disks
    can go on top of larger ones."""
    towers = {"A": copy.copy(SOLVED_TOWER), "B": [], "C": []}

    while True:  # Run a single turn on each iteration of this loop.
        # Display the towers and disks:
        displayTowers(towers)

        # Ask the user for a move:
        fromTower, toTower = getPlayerMove(towers)

        # Move the top disk from fromTower to toTower:
        disk = towers[fromTower].pop()
        towers[toTower].append(disk)

        # Check if the user has solved the puzzle:
        if SOLVED_TOWER in (towers["B"], towers["C"]):
            displayTowers(towers)  # Display the towers one last time.
            print("You have solved the puzzle! Well done!")
            sys.exit()


def getPlayerMove(towers):
    """Asks the player for a move. Returns (fromTower, toTower)."""

    while True:  # Keep asking player until they enter a valid move.
        print('Enter the letters of "from" and "to" towers, or QUIT.')
        print("(e.g., AB to move a disk from tower A to tower B.)")
        print()
        response = input("> ").upper().strip()

        if response == "QUIT":
            print("Thanks for playing!")
            sys.exit()

        # Make sure the user entered valid tower letters:
        if response not in ("AB", "AC", "BA", "BC", "CA", "CB"):
            print("Enter one of AB, AC, BA, BC, CA, or CB.")
            continue  # Ask player again for their move.

        # Use more descriptive variable names:
        fromTower, toTower = response[0], response[1]

        if len(towers[fromTower]) == 0:
            # The "from" tower cannot be an empty tower:
            print("You selected a tower with no disks.")
            continue  # Ask player again for their move.
        elif len(towers[toTower]) == 0:
            # Any disk can be moved onto an empty "to" tower:
            return fromTower, toTower
        elif towers[toTower][-1] < towers[fromTower][-1]:
            print("Can't put larger disks on top of smaller ones.")
            continue  # Ask player again for their move.
        else:
            # This is a valid move, so return the selected towers:
            return fromTower, toTower


def displayTowers(towers):
    """Display the three towers with their disks."""

    # Display the three towers:
    for level in range(TOTAL_DISKS, -1, -1):
        for tower in (towers["A"], towers["B"], towers["C"]):
            if level >= len(tower):
                displayDisk(0)  # Display the bare pole with no disk.
            else:
                displayDisk(tower[level])  # Display the disk.
        print()

    # Display the tower labels A, B, and C:
    emptySpace = " " * (TOTAL_DISKS)
    print("{0} A{0}{0} B{0}{0} C\n".format(emptySpace))


def displayDisk(width):
    """Display a disk of the given width. A width of 0 means no disk."""
    emptySpace = " " * (TOTAL_DISKS - width)

    if width == 0:
        # Display a pole segment without a disk:
        print(f"{emptySpace}||{emptySpace}", end="")
    else:
        # Display the disk:
        disk = "@" * width
        numLabel = str(width).rjust(2, "_")
        print(f"{emptySpace}{disk}{numLabel}{disk}{emptySpace}", end="")


# If this program was run (instead of imported), run the game:
if __name__ == "__main__":
    main()
------------------

[1;31m---------------------------------------------------------------------------[0m
[1;31mStdinNotImplementedError[0m                  Traceback (most recent call last)
[1;32m~\AppData\Local\Temp\ipykernel_2560\2194971151.py[0m in [0;36m<module>[1;34m[0m
[0;32m    120[0m [1;31m# If this program was run (instead of imported), run the game:[0m[1;33m[0m[1;33m[0m[0m
[0;32m    121[0m [1;32mif[0m [0m__name__[0m [1;33m==[0m [1;34m"__main__"[0m[1;33m:[0m[1;33m[0m[1;33m[0m[0m
[1;32m--> 122[1;33m     [0mmain[0m[1;33m([0m[1;33m)[0m[1;33m[0m[1;33m[0m[0m
[0m
[1;32m~\AppData\Local\Temp\ipykernel_2560\2194971151.py[0m in [0;36mmain[1;34m()[0m
[0;32m     38[0m [1;33m[0m[0m
[0;32m     39[0m         [1;31m# Ask the user for a move:[0m[1;33m[0m[1;33m[0m[0m
[1;32m---> 40[1;33m         [0mfromTower[0m[1;33m,[0m [0mtoTower[0m [1;33m=[0m [0mgetPlayerMove[0m[1;33m([0m[0mtowers[0m[1;33m)[0m[1;33m[0m[1;33m[0m[0m
[0m[0;32m     41[0m [1;33m[0m[0m
[0;32m     42[0m         [1;31m# Move the top disk from fromTower to toTower:[0m[1;33m[0m[1;33m[0m[0m

[1;32m~\AppData\Local\Temp\ipykernel_2560\2194971151.py[0m in [0;36mgetPlayerMove[1;34m(towers)[0m
[0;32m     58[0m         [0mprint[0m[1;33m([0m[1;34m"(e.g., AB to move a disk from tower A to tower B.)"[0m[1;33m)[0m[1;33m[0m[1;33m[0m[0m
[0;32m     59[0m         [0mprint[0m[1;33m([0m[1;33m)[0m[1;33m[0m[1;33m[0m[0m
[1;32m---> 60[1;33m         [0mresponse[0m [1;33m=[0m [0minput[0m[1;33m([0m[1;34m"> "[0m[1;33m)[0m[1;33m.[0m[0mupper[0m[1;33m([0m[1;33m)[0m[1;33m.[0m[0mstrip[0m[1;33m([0m[1;33m)[0m[1;33m[0m[1;33m[0m[0m
[0m[0;32m     61[0m [1;33m[0m[0m
[0;32m     62[0m         [1;32mif[0m [0mresponse[0m [1;33m==[0m [1;34m"QUIT"[0m[1;33m:[0m[1;33m[0m[1;33m[0m[0m

[1;32m~\miniconda3\lib\site-packages\ipykernel\kernelbase.py[0m in [0;36mraw_input[1;34m(self, prompt)[0m
[0;32m   1172[0m         """
[0;32m   1173[0m         [1;32mif[0m [1;32mnot[0m [0mself[0m[1;33m.[0m[0m_allow_stdin[0m[1;33m:[0m[1;33m[0m[1;33m[0m[0m
[1;32m-> 1174[1;33m             raise StdinNotImplementedError(
[0m[0;32m   1175[0m                 [1;34m"raw_input was called, but this frontend does not support input requests."[0m[1;33m[0m[1;33m[0m[0m
[0;32m   1176[0m             )

[1;31mStdinNotImplementedError[0m: raw_input was called, but this frontend does not support input requests.
StdinNotImplementedError: raw_input was called, but this frontend does not support input requests.

